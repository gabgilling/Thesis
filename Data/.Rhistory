plot(m2$residuals, ylab = "Residuals", title = "Regression Model Residuals Are Autocorrelated")
abline(h= 0)
plot(m2$residuals, ylab = "Residuals", main = "Regression Model Residuals Are Autocorrelated")
abline(h= 0)
shp_df@data$ols.res<-resid(m2) #residuals ols
shp_df@data$ols.res<-m2$residuals #residuals ols
View(shp_df$data)
View(shp_df@data)
View(shp_df@data)
shp_df <- readOGR("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/shapefiles")
m1 <- lm(f_pref_ind ~ NUMPOINTS , data = shp_df@data)
summary(m1)
m2 <- lm(f_pref_ind ~ NUMPOINTS + as.numeric(f_pid) + as.numeric(votes_by_1), data = shp_df@data)
summary(m2)
plot(m2$residuals, ylab = "Residuals", main = "Regression Model Residuals Are Autocorrelated")
abline(h= 0)
shp_df <- readOGR("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/shapefiles/final_nona")
shp_df <- readOGR("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/shapefiles/final_nona.shp")
m1 <- lm(f_pref_ind ~ NUMPOINTS , data = shp_df@data)
summary(m1)
m2 <- lm(f_pref_ind ~ NUMPOINTS + as.numeric(f_pid) + as.numeric(votes_by_1), data = shp_df@data)
summary(m2)
plot(m2$residuals, ylab = "Residuals", main = "Regression Model Residuals Are Autocorrelated")
abline(h= 0)
list.queen <-poly2nb(shp_df, queen = T)
W <- nb2listw(list.queen, style = "W", zero.policy = T)
moran.lm <- lm.morantest(m2, W, alternative = "two.sided", zero.policy =  T)
moran.lm
print(lm.LMtests(m2, W, test = "all", zero.policy = T))
err <- errorsarlm(m2, data = shp_df@data, W, zero.policy = T)
summary(err)
shp_df@data$ols.res<- m2$residuals #residuals ols
require(RColorBrewer)
qpal<-colorQuantile("OrRd", .res, n=9)
qpal<-colorQuantile("OrRd", m2$residuals, n=9)
require(RColorBrewer)
qpal<-colorQuantile("OrRd", m2$residuals, n=9)
library(RColorBrewer)
library(RColorBrewer)
qpal<-colorQuantile("OrRd", m2$residuals, n=9)
library(leaflet)
install.packages("leaflet")
library(leaflet)
qpal<-colorQuantile("OrRd", m2$residuals, n=9)
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal(shp_df@data$ols.res)
) %>%
addTiles()
stargazer(m1)
stargazer(m2)
m2 <- lm(f_pref_ind ~ NUMPOINTS + as.numeric(f_pid) + as.numeric(votes_by_1), data = shp_df@data)
geom_polygon(shp_df)
(err)
stargazer(err)
stargazer(summary(err)))
stargazer(summary(err))
(summary(err))
err$coefficients
err
stargazer(err)
err$residuals
plot(err$residuals)
qpal2 <-colorQuantile("OrRd", err$residuals, n=9)
shp_df@data$err.res <- err$residuals
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal(shp_df@data$err.res)
) %>%
addTiles('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')
plot(err$residuals, xlab = "Residual Index", ylab = "Residuals", main = "Robust Regression Model Residuals Are/nNOT Autocorrelated")
abline(h= 0)
err$residuals
plot(err$residuals, xlab = "Residual Index", ylab = "Residuals", main = "Robust Regression Model Residuals Are/nNOT Autocorrelated")
plot(err$residuals)
plot(err$residuals, xlab = "Residual Index", ylab = "Residuals", main = "Robust Regression Model Residuals Are/nNOT Autocorrelated")
abline(h= 0)
plot(err$residuals, xlab = "Residual Index", ylab = "Residuals", main = "Robust Regression Model Residuals Are/nNOT Autocorrelated")
abline(h= 0)
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles(providerTileOptions('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'))
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles(providerTileOptions('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')) %>% setview(41.4925,  99.9018)
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles(providerTileOptions('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')) %>%
setView(41.4925,  99.9018)
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles(providerTileOptions('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')) %>%
setView(41.4925,  99.9018, zoom = 4)
leaflet(shp_df) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal2(shp_df@data$err.res)
) %>%
addTiles(providerTileOptions('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png')) %>%
setView(99.9018, 41.4925, zoom = 4)
t <- shp_df@data %>% select(ols.res, err.res, GEOID2)
View(t)
write.csv(t)
write.csv(t, /Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/t.csv)
write.csv(t, /Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/to.csv)
write.csv(t, /Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/res.csv)
write.csv(t, "/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/GIS-Project/residuals.csv")
View(prefs.621)
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis")
getwd()
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis")
getwd()
saveRDS
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis/Data/")
getwd()
saveRDS(eb62.1, "eb621.rds")
saveRDS(eb68.2, "eb682.rds")
saveRDS(eb69.2, "eb692.rds")
saveRDS(eb71.1, "eb711.rds")
saveRDS(eb72.1, "eb721.rds")
saveRDS(eb75.2, "eb752.rds")
saveRDS(eb80.2, "eb802.rds")
saveRDS(eb81.3, "eb813.rds")
saveRDS(eb83.4, "eb834.rds")
saveRDS(eb87.1, "eb871.rds")
saveRDS(eb88.1, "eb881.rds")
saveRDS(eb90.2, "eb902.rds")
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis/Models")
saveRDS(fit62.1, "fit.621.rds")
saveRDS(fit621, "fit.621.rds")
saveRDS(fit.621, "fit.621.rds")
saveRDS(fit.682, "fit.682.rds")
saveRDS(fit.692, "fit.692.rds")
saveRDS(fit.711, "fit.711.rds")
saveRDS(fit.721, "fit.721.rds")
saveRDS(fit.752, "fit.752.rds")
saveRDS(fit.802, "fit.802.rds")
saveRDS(fit.813, "fit.813.rds")
saveRDS(fit.834, "fit.834.rds")
saveRDS(fit.871, "fit.871.rds")
saveRDS(fit.881, "fit.881.rds")
saveRDS(fit.902, "fit.902.rds")
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis/Data")
saveRDS(prefs.621, "prefs.621.rds")
saveRDS(prefs.692, "prefs.692.rds")
saveRDS(prefs.813, "prefs.813.rds")
saveRDS(prefs.834, "prefs.834.rds")
saveRDS(prefs.752, "prefs.752.rds")
saveRDS(prefs.682, "prefs.682.rds")
saveRDS(prefs.692, "prefs.692.rds")
saveRDS(prefs.711, "prefs.711.rds")
saveRDS(prefs.721, "prefs.721.rds")
saveRDS(prefs.802, "prefs.802.rds")
saveRDS(prefs.871, "prefs.871.rds")
saveRDS(prefs.881, "prefs.881.rds")
saveRDS(prefs.902, "prefs.902.rds")
saveRDS(total.prefs, "total.prefs.rds")
lm(mep_pref ~ mean_pref + country.x + as.factor(Parliament), data = reg_df2)
View(reg_df2)
reg_df2$mep_pref_c <- reg_df2$mep_pref - mean(reg_df2$mep_pref)
reg_df2$mean_pref_c <- reg_df2$mean_pref - mean(reg_df2$mean_pref)
summary(lm(mep_pref_c~ mean_pref_c + country.x + as.factor(Parliament), data = reg_df2), title = "Regression Output")
summary(lm(mep_pref ~ mean_pref + country.x, data = reg_df), digits = 3)
mep_prefs.total <- mep.ids %>%
group_by(constituency, country) %>%
summarise(mep_pref = mean(mean_pref, na.rm = T))
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df <- merge(mep_prefs.total,voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
summary(lm(mep_pref ~ mean_pref + country.x, data = reg_df), digits = 3)
summary(lm(mep_pref~ mean_pref+ country.x + as.factor(Parliament), data = reg_df2), title = "Regression Output")
summary(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2), title = "Regression Output")
fit_var_logit <- function(survey_df = c(), var_name, regional_predictors){
# print(length(survey_df))
if (length(survey_df) >= 2){
temp <- get(survey_df[1]) %>% select(var_name, age_cat2, gender_male, ms, NUTS_eb)
for (i in 2:length(survey_df)){
temp <- rbind(temp, get(survey_df[i]) %>% select(var_name, age_cat2, gender_male, ms, NUTS_eb))
}
} else {
temp = get(survey_df)
}
temp <- merge(temp, regional_predictors, by = "Constituency", all.x = T)
temp <- temp %>% group_by(age_cat2, gender_male, ms, Constituency, country, gdp_cap2,
higher_ed2,hhd_income2, unemp_pct2) %>%
summarise(pro = sum(get(var_name) == 1), against = n() - pro) %>%
na.omit()
set.seed(1010)
return(stan_glmer(cbind(pro, against) ~ (1|country) + (1|Constituency) + (1 | age_cat2)  + (1|ms) + (1 | age_cat2:ms) + (1|age_cat2:gender_male) + (1|gender_male:ms) + gdp_cap2 + gender_male, data = temp, family = binomial(link = "logit"), refresh= 0,
chains = 4, cores=  4, adapt_delta= 0.99))
}
fit.692 <- generate_estimates("eb69.2")
prefs.692_int <- poststrat_survey(fit.692)
prefs.692_int[[1]]$year <- 2008
prefs.692_int[[1]]$parliament <- 6
names(prefs.692_int) <- c("agg_pref", "question_prefs")
ggplot(prefs.692_int[[1]] %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref), mean_se = mean(mean_se)),
aes(x= reorder(Constituency, mean_pref), y = mean_pref, color = country)) +
geom_point() +
geom_errorbar(aes(ymin= mean_pref - mean_se, ymax= mean_pref + mean_se), width=0) +
theme_classic() +
ggtitle("") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "Constituency", y = "Mean Preference")
fit.813_int <- generate_estimates("eb81.3")
fit.752_int <- generate_estimates("eb75.2")
fit.621_int <- generate_estimates("eb62.1")
fit.682_int <- generate_estimates("eb68.2")
fit.711_int <- generate_estimates("eb71.1")
fit.721_int <- generate_estimates("eb72.1")
fit.752_int <- generate_estimates("eb75.2")
fit.802_int <- generate_estimates("eb80.2")
fit.834_int <- generate_estimates("eb83.4")
fit.871_int <- generate_estimates("eb87.1")
fit.881_int <- generate_estimates("eb88.1")
fit.902_int <- generate_estimates("eb90.2")
prefs.621_int <- poststrat_survey(fit.621_int)
prefs.621_int[[1]]$year <- 2004
prefs.621_int[[1]]$parliament <- 6
names(prefs.621_int) <- c("agg_pref", "question_prefs")
View(fit.621_noed)
View(prefs.621_int)
prefs.813_int <- poststrat_survey(fit.813_int)
prefs.813_int[[1]]$year <- 2014
prefs.813_int[[1]]$parliament <- 7
names(prefs.813_int) <- c("agg_pref", "question_prefs")
prefs.752_int <- poststrat_survey(fit.752_int)
prefs.752_int[[1]]$parliament <- 7
prefs.752_int[[1]]$year <- 2011
names(prefs.752_int) <- c("agg_pref", "question_prefs")
prefs.682_int <- poststrat_survey(fit.682_int)
prefs.682_int[[1]]$year <- 2007
prefs.682_int[[1]]$parliament <- 6
names(prefs.682_int) <- c("agg_pref", "question_prefs")
prefs.711_int <- poststrat_survey(fit.711_int)
prefs.711_int[[1]]$year <- 2009
prefs.711_int[[1]]$parliament <- 6
names(prefs.711_int) <- c("agg_pref", "question_prefs")
prefs.721_int <- poststrat_survey(fit.721_int)
prefs.721_int[[1]]$year <- 2009
prefs.721_int[[1]]$parliament <- 7
names(prefs.721_int) <- c("agg_pref", "question_prefs")
prefs.752_int <- poststrat_survey(fit.752_int)
prefs.752_int[[1]]$year <- 2011
prefs.752_int[[1]]$parliament <- 7
names(prefs.752_int) <- c("agg_pref", "question_prefs")
prefs.802_int <- poststrat_survey(fit.802_int)
prefs.802_int[[1]]$year <- 2013
prefs.802_int[[1]]$parliament <- 7
names(prefs.802_int) <- c("agg_pref", "question_prefs")
prefs.834_int <- poststrat_survey(fit.834_int)
prefs.834_int[[1]]$year <- 2015
prefs.834_int[[1]]$parliament <- 8
names(prefs.834_int) <- c("agg_pref", "question_prefs")
prefs.871_int <- poststrat_survey(fit.871_int)
prefs.871_int[[1]]$year <- 2017
prefs.871_int[[1]]$parliament <- 8
names(prefs.871_int) <- c("agg_pref", "question_prefs")
prefs.881_int <- poststrat_survey(fit.881_int)
prefs.881_int[[1]]$parliament <- 8
prefs.881_int[[1]]$year <- 2017
names(prefs.881_int) <- c("agg_pref", "question_prefs")
prefs.902_int <- poststrat_survey(fit.902_int)
prefs.902_int[[1]]$year <- 2018
prefs.902_int[[1]]$parliament <- 8
names(prefs.902_int) <- c("agg_pref", "question_prefs")
total.prefs_int <- rbind(prefs.621_int[[1]],prefs.692_int[[1]], prefs.813_int[[1]], prefs.752_int[[1]], prefs.682_int[[1]],
prefs.711_int[[1]], prefs.721_int[[1]],prefs.752_int[[1]], prefs.802_int[[1]], prefs.834_int[[1]],
prefs.871_int[[1]], prefs.902_int[[1]], prefs.881_int[[1]])
total.prefs_int$parliament <- ifelse(total.prefs_int$parliament == 6, "6th Term (2004-2009)",
ifelse(total.prefs_int$parliament == 7, "7th Term (2009-2014)", "8th Term (2014-2019)"))
ggplot(total.prefs_int %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref), mean_se = mean(mean_se)),
aes(x= reorder(Constituency, mean_pref), y = mean_pref, color = country)) +
geom_point() +
geom_errorbar(aes(ymin= mean_pref - mean_se, ymax= mean_pref + mean_se), width=0) +
theme_classic() +
ggtitle("") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "Constituency", y = "Mean Preference")
ggplot(total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref), mean_se = mean(mean_se)),
aes(x= reorder(Constituency, mean_pref), y = mean_pref, color = country)) +
geom_point() +
geom_errorbar(aes(ymin= mean_pref - mean_se, ymax= mean_pref + mean_se), width=0) +
theme_classic() +
ggtitle("") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "Constituency", y = "Mean Preference")
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis/Models")
saveRDSfit.621_int, "fit.621.rds")
saveRDS(fit.682_int, "fit.682.rds")
saveRDS(fit.692, "fit.692.rds")
saveRDS(fit.711_int, "fit.711.rds")
saveRDS(fit.721_int, "fit.721.rds")
saveRDS(fit.752_int, "fit.752.rds")
saveRDS(fit.802_int, "fit.802.rds")
saveRDS(fit.813_int, "fit.813.rds")
saveRDS(fit.834_int, "fit.834.rds")
saveRDS(fit.871_int, "fit.871.rds")
saveRDS(fit.881_int, "fit.881.rds")
saveRDS(fit.902_int, "fit.902.rds")
setwd("/Users/gabgilling/Documents/Documents - Gabriel’s MacBook Pro/GitHub/Thesis/Data")
saveRDS(prefs.621_int, "prefs.621.rds")
saveRDS(prefs.692_int, "prefs.692.rds")
saveRDS(prefs.813_int, "prefs.813.rds")
saveRDS(prefs.834_int, "prefs.834.rds")
saveRDS(prefs.752_int, "prefs.752.rds")
saveRDS(prefs.682_int, "prefs.682.rds")
saveRDS(prefs.692_int, "prefs.692.rds")
saveRDS(prefs.711_int, "prefs.711.rds")
saveRDS(prefs.721_int, "prefs.721.rds")
saveRDS(prefs.802_int, "prefs.802.rds")
saveRDS(prefs.871_int, "prefs.871.rds")
saveRDS(prefs.881_int, "prefs.881.rds")
saveRDS(prefs.902_int, "prefs.902.rds")
saveRDS(total.prefs_int, "total.prefs.rds")
mep_prefs.total <- mep.ids %>%
summarise(mep_pref = mean(mean_pref, na.rm = T))
voter_prefs.total <- total.prefs %>%
summarise(mean_pref = mean(mean_pref))
View(voter_prefs.total)
reg_df <- merge(mep_prefs.total,voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df <- merge(mep_prefs.total,voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
View(mep_prefs.total)
mep.ids
reg_df <- merge(mep.ids %>% select(mean_pref, constituency),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
View(reg_df)
reg_df$mep_pref <- reg_df$mean_pref.x
summary(lm(mep_pref ~ mean_pref + country.x, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref.y + country.x, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref.y + country, data = reg_df), digits = 3)
View(mep.ids)
reg_df <- merge(mep.ids %>% select(mean_pref, constituency, Parliament),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
reg_df$mep_pref <- reg_df$mean_pref.x
summary(lm(mep_pref ~ mean_pref.y + country, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref.y + country + Parliament, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref.y + country + Parliament + constituency, data = reg_df), digits = 3)
count_votes <- function(resolution, col_name){
# initialize 0s for abstained botes
mep.ids[col_name] <- 0
for (i in resolution$votes$`+`$groups){
for (id in unname(unlist(i))){
if (id %in% unique(mep.ids$ID)){
mep.ids[mep.ids$ID == id,][col_name] <- 1
}
}
}
for (i in resolution$votes$`-`$groups){
for (id in unname(unlist(i))){
if (id %in% unique(mep.ids$ID)){
mep.ids[mep.ids$ID == id,][col_name]<- -1
}
}
}
# set values to NA for MEPs not present during a certain vote
mep.ids[col_name] <-  with(mep.ids, ifelse(Parliament != substring(col_name, 2,2), NA, get(col_name)))
return(mep.ids)
}
for (i in 1:length(legislation_list)){
# some laws were not present in the parltrack database, so ignore them
if (length(legislation_list[[i]]) != 0){
# create a column with the law's ID and count votes
mep.ids <- count_votes(resolution = legislation_list[[i]], legislation_list[[i]]$doc)
}
}
mep.ids$ID <- as.character(mep.ids$ID)
mep.ids <- mep.ids %>% group_by(constituency, Parliament) %>%
ungroup %>%
mutate(mean_pref = rowMeans(select(., is.numeric), na.rm = T),
mean_sd = apply(select(., is.numeric) ,1, sd, na.rm = TRUE))
View(mep.ids)
mep.ids <- read.csv("https://raw.githubusercontent.com/gabgilling/Thesis/master/Data/mep_data_with_IDs.csv")
mep.ids$constituency <- ifelse(mep.ids$constituency == "Southern Italy", "South Italy",
ifelse(mep.ids$constituency == "Massif-central-Centre",
"Massif-central–Centre", mep.ids$constituency))
mep.ids$Parliament <- as.character(mep.ids$Parliament)
mep.ids$X <- NULL
count_votes <- function(resolution, col_name){
# initialize 0s for abstained botes
mep.ids[col_name] <- 0
for (i in resolution$votes$`+`$groups){
for (id in unname(unlist(i))){
if (id %in% unique(mep.ids$ID)){
mep.ids[mep.ids$ID == id,][col_name] <- 1
}
}
}
for (i in resolution$votes$`-`$groups){
for (id in unname(unlist(i))){
if (id %in% unique(mep.ids$ID)){
mep.ids[mep.ids$ID == id,][col_name]<- -1
}
}
}
# set values to NA for MEPs not present during a certain vote
mep.ids[col_name] <-  with(mep.ids, ifelse(Parliament != substring(col_name, 2,2), NA, get(col_name)))
return(mep.ids)
}
for (i in 1:length(legislation_list)){
# some laws were not present in the parltrack database, so ignore them
if (length(legislation_list[[i]]) != 0){
# create a column with the law's ID and count votes
mep.ids <- count_votes(resolution = legislation_list[[i]], legislation_list[[i]]$doc)
}
}
library(matrixStats)
mep.ids$ID <- as.character(mep.ids$ID)
mep.ids <- mep.ids %>% group_by(constituency, Parliament) %>%
ungroup %>%
mutate(mean_pref = rowMeans(select(., is.numeric), na.rm = T),
mean_sd = apply(select(., is.numeric) ,1, sd, na.rm = TRUE))
mep_prefs.total <- mep.ids %>%
group_by(constituency, country) %>%
summarise(mep_pref = mean(mean_pref, na.rm = T))
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df <- merge(mep.ids %>% select(mean_pref, constituency, Parliament),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
reg_df$mep_pref <- reg_df$mean_pref.x
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df <- merge(mep.ids %>% select(mean_pref, constituency, Parliament),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
reg_df$mep_pref <- reg_df$mean_pref.x
summary(lm(mep_pref ~ mean_pref.y + country + Parliament + constituency, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref.y + country + Parliament, data = reg_df), digits = 3)
mep_prefs.total.parl <- mep.ids %>%
group_by(constituency, country, Parliament) %>%
summarise(mep_pref = mean(mean_pref, na.rm = T))
voter_prefs.total.parl <- total.prefs %>%
group_by(Constituency, parliament, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df2 <- merge(mep_prefs.total.parl,voter_prefs.total.parl, by.x = c("Parliament", "constituency"), by.y = c("parliament", "Constituency"), all.y = T)
summary(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2), title = "Regression Output")
(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2))
View(reg_df2)
legislation <- read.csv("https://raw.githubusercontent.com/gabgilling/Thesis/master/Data/legislation.csv")
View(legislation)
legislation_list <- list()
for (i in 1:nrow(legislation)){
cond <- sapply(MEP.data, function(x) grepl(legislation$ID[i], x$title))
dat <- MEP.data[cond]
cond <- sapply(dat, function(x) grepl("roposition|ésolution", x$title))
try(legislation_list[[i]] <- dat[cond][[1]])
}
View(legislation_list)
mep.ids <- read.csv("https://raw.githubusercontent.com/gabgilling/Thesis/master/Data/mep_data_with_IDs.csv")
mep.ids$constituency <- ifelse(mep.ids$constituency == "Southern Italy", "South Italy",
ifelse(mep.ids$constituency == "Massif-central-Centre",
"Massif-central–Centre", mep.ids$constituency))
mep.ids$Parliament <- as.character(mep.ids$Parliament)
mep.ids$X <- NULL
for (i in 1:length(legislation_list)){
# some laws were not present in the parltrack database, so ignore them
if (length(legislation_list[[i]]) != 0){
# create a column with the law's ID and count votes
mep.ids <- count_votes(resolution = legislation_list[[i]], legislation_list[[i]]$doc)
}
}
mep.ids$ID <- as.character(mep.ids$ID)
mep.ids <- mep.ids %>% group_by(constituency, Parliament) %>%
ungroup %>%
mutate(mean_pref = rowMeans(select(., is.numeric), na.rm = T),
mean_sd = apply(select(., is.numeric) ,1, sd, na.rm = TRUE))
unique(mep.ids$constituency)
voter_prefs.total <- total.prefs %>%
group_by(Constituency, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df <- merge(mep.ids %>% select(mean_pref, constituency, Parliament),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
reg_df$mep_pref <- reg_df$mean_pref.x
summary(lm(mep_pref ~ mean_pref.y + country + Parliament, data = reg_df), digits = 3)
summary(lm(mep_pref ~ mean_pref + country.x, data = reg_df), digits = 3)
reg_df <- merge(mep.ids %>% group_by(Name) %>%  select(mean_pref, constituency, Parliament),voter_prefs.total, by.x = "constituency", by.y = "Constituency", all.y = T)
reg_df$mep_pref <- reg_df$mean_pref.x
summary(lm(mep_pref ~ mean_pref.y + country + Parliament, data = reg_df), digits = 3)
mep_prefs.total.parl <- mep.ids %>%
group_by(constituency, country, Parliament) %>%
summarise(mep_pref = mean(mean_pref, na.rm = T))
voter_prefs.total.parl <- total.prefs %>%
group_by(Constituency, parliament, country) %>%
summarise(mean_pref = mean(mean_pref))
reg_df2 <- merge(mep_prefs.total.parl,voter_prefs.total.parl, by.x = c("Parliament", "constituency"), by.y = c("parliament", "Constituency"), all.y = T)
(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2))
View(reg_df2)
View(voter_prefs.total.parl)
View(mep_prefs.total.parl)
mep_prefs.total.parl$parliament <- ifelse(mep_prefs.total.parl$parliament == 6, "6th Term (2004-2009)",
ifelse(mep_prefs.total.parl$parliament == 7, "7th Term (2009-2014)", "8th Term (2014-2019)"))
mep_prefs.total.parl$parliament
mep_prefs.total.parl$Parliament <- ifelse(mep_prefs.total.parl$Parliament == 6, "6th Term (2004-2009)",
ifelse(mep_prefs.total.parl$Parliament == 7, "7th Term (2009-2014)", "8th Term (2014-2019)"))
reg_df2 <- merge(mep_prefs.total.parl,voter_prefs.total.parl, by.x = c("Parliament", "constituency"), by.y = c("parliament", "Constituency"), all.y = T)
View(reg_df2)
(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2))
summary(lm(mep_pref~ country.x + as.factor(Parliament), data = reg_df2))
summary(lm(mep_pref~ mean_pref + country.x + as.factor(Parliament), data = reg_df2))
